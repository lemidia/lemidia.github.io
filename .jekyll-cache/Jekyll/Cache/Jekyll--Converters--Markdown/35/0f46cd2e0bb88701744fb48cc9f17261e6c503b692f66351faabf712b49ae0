I"\<h1 id="exceptionfilelog-handling">Exception/File/Log Handling</h1>

<p>파이썬에서의 예외처리, 파일 읽고 쓰는 법 그리고 로그 핸들링에 대해서 알아봅니다.</p>

<h2 id="exception">Exception</h2>

<p>프로그램 실행되고 런타임 상황에서 여러가지 예상치 못한 예외 상황이 생길 수 있습니다.<br />
예를 들어 배열의 인덱스 범위를 초과해서 접근한다던지, 무한루프에 빠진다던지, 숫자를 0으로 나눈다던지 하는 상황이 있을 수 있습니다.</p>

<p>예외는 크게 두가지로 분류합니다.</p>

<ol>
  <li>예상가능한예외</li>
  <li>예상이 불가능한 예외</li>
</ol>

<p>예상 가능한 예외는 발생여부를 사전에 인지할 수 있는 예외로서 개발자가 명시적으로 정의 할 수 있습니다.<br />
예상 불가능한 예외는 인터프리터 과정에서 발생하는 예외나 리스트의 범위를 넘어가는 값 호출,정수 0 으로 나눔을 들 수 있습니다.</p>

<p>이러한 예외가 발생할 경우 후속 조치 등 대처가 필요합니다.</p>

<p>이것을 Exception Handling이라 합니다.</p>

<p><strong>파이썬의 예외 처리</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="err">예외</span> <span class="err">발생</span> <span class="err">가능</span> <span class="err">코드</span>
<span class="k">except</span> <span class="o">&lt;</span><span class="nb">Exception</span> <span class="n">Type</span><span class="o">&gt;</span><span class="p">:</span>
    <span class="err">예외</span> <span class="err">발생시</span> <span class="err">대응하는</span> <span class="err">코드</span>
</code></pre></div></div>

<p><strong>0으로 숫자를 나눌 때 예외 처리하기</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="n">i</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Not divided by 0"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>try ~ except ~ else</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
   <span class="k">try</span><span class="p">:</span>
     <span class="n">result</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">/</span> <span class="n">i</span>
   <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
     <span class="k">print</span><span class="p">(</span><span class="s">"Not divided by 0"</span><span class="p">)</span>
   <span class="k">else</span><span class="p">:</span>
     <span class="k">print</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>raise 구문 : 필요에 따라 강제로 Exception을 발생</strong></p>

<ul>
  <li><code class="highlighter-rouge">raise &lt;Exception Type&gt;(예외정보)</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">value</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"변환할 정수 값을 입력해주세요"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">digit</span> <span class="ow">in</span> <span class="n">value</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">digit</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"0123456789"</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"숫자값을 입력하지 않으셨습니다"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"정수값으로 변환된 숫자 -"</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="file-handling">File Handling</h2>

<p>파이썬에서는 파일을 불러오기, 쓰기, 읽기, 수정하기 등이 가능합니다.</p>

<p><strong>파일의 종류</strong></p>

<ul>
  <li>기본적인 파일 종류로 text 파일과 binary 파일로 나눔</li>
  <li>컴퓨터는 text 파일을 처리하기 위해 binary 파일로 변환시킴 (예: pyc 파일)</li>
  <li>모든 text 파일도 실제는 binary 파일,</li>
</ul>

<p><strong>Binary 파일</strong></p>

<p>컴퓨터만 이해할 수 있는 형태인 이진(법)형식으로 저장된 파일 (엑셀파일, 워드 파일 등등)</p>

<p><strong>Text 파일</strong></p>

<p>인간도 이해할 수 있는 형태인 문자열 형식으로 저장된 파일 (메모장에 저장된 파일, HTML 파일)</p>

<h3 id="python-file-io">Python File I/O</h3>

<p>파이썬은 파일 처리를 위해 “open” 키워드를 사용합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"&lt;파일이름&gt;"</span><span class="p">,</span> <span class="s">"접근 모드"</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>r - 읽기모드 - 파일을 읽기만 할 때 사용</li>
  <li>w - 쓰기모드 - 파일에 내용을 쓸 때 사용</li>
  <li>a - 추가모드 - 파일의 마지막에 새로운 내용을 추가 시킬 때 사용</li>
</ul>

<p><strong>파이썬의 File Read</strong></p>

<p>read() txt 파일 안에 있는 내용을 문자열로 반환</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"i_have_a_dream.txt"</span><span class="p">,</span> <span class="s">"r"</span> <span class="p">)</span>
<span class="n">contents</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">contents</span><span class="p">)</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># or
</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"i_have_a_dream.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">my_file</span><span class="p">:</span>
    <span class="n">contents</span> <span class="o">=</span> <span class="n">my_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">contents</span><span class="p">),</span> <span class="n">contents</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>파이썬의 File Write</strong></p>

<p>mode는 “w”, encoding=“utf8”</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"count_log.txt"</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf8"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s">"</span><span class="si">%</span><span class="s">d번째 줄입니다.</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">i</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="logging">Logging</h2>

<p>로그를 남기는 것으로 프로그램이 실행되는 동안 일어나는 정보를 기록하는 것입니다.<br />
특정 유저의 접근이나, 프로그램의 Exception이 발생할 때 또는 특정 함수의 사용을 로그로 남길 수 있습니다.<br />
방법은 Console 화면에 출력, 파일에 남기기, DB에 남기기 등등이 있습니다.</p>

<p>기록을 print로 남기는 것도 가능은 하나 Console 창에만 남기는 기록은 분석시 사용이 불가하다는 단점이 있습니다.
따라서 모듈별로 별도의 logging을 남겨 따로 파일에 저장해 기록을 유지할 필요가 있습니다.</p>

<p>이러한 기능을 체계적으로 지원하는 모듈이 Logging 모듈입니다.</p>

<p><strong>Logging 모듈</strong>은 Python의 기본 Log 관리 모듈입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">logging</span>
<span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">"틀렸잖아!"</span><span class="p">)</span>
<span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"확인해"</span><span class="p">)</span>
<span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">"조심해!"</span><span class="p">)</span>
<span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">"에러났어!!!"</span><span class="p">)</span>
<span class="n">logging</span><span class="o">.</span><span class="n">critical</span> <span class="p">(</span><span class="s">"망했다..."</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>logging level</strong></p>

<p>Log관리 시 가장 기본이 되는 설정 정보로서, 프로그램 진행 상황에 따라 다른 Level의 Log를 출력할 수 있게 합니다.
DEBUG &gt; INFO &gt; WARNING &gt; ERROR &gt; Critical</p>

<ul>
  <li>debug : 개발시 처리 기록을 남겨야하는 로그 정보를 남김</li>
  <li>info : 처리가 진행되는 동안의 정보를 알림</li>
  <li>warning : 사용자가 잘못 입력한 정보나 처리는 가능하나 원래 개 발시 의도치 않는 정보가 들어왔을 때 알림</li>
  <li>error : 잘못된 처리로 인해 에러가 났으나, 프로그램은 동작할 수 있음을 알림</li>
  <li>critical : 잘못된 처리로 데이터 손실이나 더이상 프로그램이 동 작할 수 없음을 알림</li>
</ul>

<h1 id="python-data-handling">Python data handling</h1>

<p>데이터는 여러 형태로 저장이 될 수 있습니다.<br />
csv, html, xml json 등..<br />
오늘은 여기서 csv와 json 데이터 형식을 다루는 방법을 알아봅니다.</p>

<h2 id="comma-separate-value">Comma Separate Value</h2>

<p>CSV, 필드를 쉼표(,)로 구분한 텍스트 파일입니다.<br />
엑셀 양식의 데이터를 프로그램에 상관없이 쓰기 위한 데이터 형식이라고 생각하면 쉽습니다.<br />
탭(TSV), 빈칸(SSV) 등으로 구분해서 만들기도 합니다.</p>

<p>CSV 파일 예시 )</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">학번</span><span class="p">,</span><span class="err">이름</span><span class="p">,</span><span class="err">성별</span><span class="p">,</span><span class="err">나이</span><span class="p">,</span><span class="err">사는곳</span>
<span class="mi">01</span><span class="p">,</span><span class="err">권아름</span><span class="p">,</span><span class="err">여자</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="err">서울</span>
<span class="mi">23</span><span class="p">,</span><span class="err">서아인</span><span class="p">,</span><span class="err">여자</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="err">부산</span>
<span class="mi">35</span><span class="p">,</span><span class="err">박희원</span><span class="p">,</span><span class="err">남자</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="err">인천</span>
</code></pre></div></div>

<p><strong>다음은 CSV 파일 읽기 예제입니다</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">line_counter</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#파일의 총 줄수를 세는 변수
</span><span class="n">data_header</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">#data의 필드값을 저장하는
</span><span class="n">customer_list</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">#cutomer 개별 List를 저장하는 List
</span>
<span class="k">with</span> <span class="nb">open</span> <span class="p">(</span><span class="s">"customers.csv"</span><span class="p">)</span> <span class="k">as</span> <span class="n">customer_data</span><span class="p">:</span> <span class="c1">#customer.csv 파일을 customer_data 객체에 저장
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">customer_data</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span> <span class="c1">#customer.csv에 한줄씩 data 변수에 저장
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span> <span class="k">break</span> <span class="c1">#데이터가 없을 때, Loop 종료
</span>    <span class="k">if</span> <span class="n">line_counter</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="c1">#첫번째 데이터는 데이터의 필드
</span>        <span class="n">data_header</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="c1">#데이터의 필드는 data_header List에 저장, 데이터 저장시 “,”로 분리
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">customer_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">))</span> <span class="c1">#일반 데이터는 customer_list 객체에 저장, 데이터 저장시 “,”로 분리
</span>    <span class="n">line_counter</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Header :</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">data_header</span><span class="p">)</span> <span class="c1">#데이터 필드 값 출력
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span> <span class="c1">#데이터 출력 (샘플 10개만)
</span>  <span class="k">print</span> <span class="p">(</span><span class="s">"Data"</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="s">":</span><span class="se">\t\t</span><span class="s">"</span><span class="p">,</span><span class="n">customer_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
<span class="k">print</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">customer_list</span><span class="p">))</span> <span class="c1">#전체 데이터 크기 출력
</span></code></pre></div></div>

<p><strong>CSV 객체로 CSV 처리</strong></p>

<p>위에서 보았듯이, Text 파일 형태로 데이터 처리 시 문장 내에 들어가 있는 “,” 등에 대해 전처리 과정이 필요한데요, 파이썬에서는 간단히 CSV파일을 처리하기 위해 csv 객체를 제공합니다.</p>

<p><strong>CSV 객체 활용</strong></p>

<ul>
  <li>delimiter: 글자를 나누는 기준</li>
  <li>quotechar: 문자열을 둘러싸는 신호 문자</li>
  <li>quoting: 데이터 나누는 기준이 quotechar에 의해 둘러싸인 레벨</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">csv</span>
<span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">f</span><span class="p">,</span>
          <span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">,</span> <span class="n">quotechar</span><span class="o">=</span><span class="s">'"'</span><span class="p">,</span>
          <span class="n">quoting</span><span class="o">=</span><span class="n">csv</span><span class="o">.</span><span class="n">QUOTE_ALL</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="json">JSON</h2>

<p>JavaScript Object Notation이라고 하며, 웹의 동적성을 표현하는데 쓰이는 언어인 Java Script의 데이터 객체 표현 방식입니다.<br />
주로 서버와 클라이언트 사이에서 http 통신을 하며 데이터를 주고 받는 데, 그 때 들어가는 패싱 데이터로 많이 쓰입니다.<br />
간결성으로 기계/인간이 모두 이해하기 편합니다.</p>

<p>JSON은 key:value 쌍으로 표현이 됩니다.</p>

<p>```java script
{“employees”:[
    {“firstName”:”John”,
    “lastName”:”Doe”
    },
    {“firstName”:”Anna”,
    “lastName”:”Smith”
    },
    {“firstName”:”Peter”,
    “lastName”:”Jones”
    }
]}</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
**JSON Read**

파이썬에서는 JSON을 불러와 읽고, 처리할 수 있습니다.  
JSON 파일의 구조를 확인 후 읽고, Dict Type 처럼 처리하면 됩니다.

1. json을 처리할 수 있는 모듈을 임포트 합니다.
2. with open으로 파일을 엽니다.
3. 파일을 읽어 이를 contens에 넣습니다.
4. 모듈을 이용해 json파일을 파이선에서 쓸 수 있도록 dict type으로 로드합니다.
5. 이제 json_data를 dict처럼 쓸 수 있습니다.

```python
# json_example.json

{"employees":[
    {"firstName":"John",
    "lastName":"Doe"
    },
    {"firstName":"Anna",
    "lastName":"Smith"
    },
    {"firstName":"Peter",
    "lastName":"Jones"
    }
]}

#######

import json

with open("json_example.json", "r", encoding="utf8") as f:
    contents = f.read()
    json_data = json.loads(contents)
    print(json_data["employees"])
</code></pre></div></div>

<p><strong>JSON Write</strong></p>

<p>위와 비슷하게 사전에 dict를 정의하고, 이를 json으로 변환하여 처리할 수 있습니다.
Dict Type으로 데이터 저장 후 josn 모듈로 Write</p>

<ol>
  <li>json을 처리할 수 있는 모듈을 임포트 합니다.</li>
  <li>Dict Type으로 데이터를 정의합니다.</li>
  <li>data.json 파일을 쓰기 모드로 엽니다.</li>
  <li>json.dump를 이용해 쓰기를 실행합니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>
<span class="n">dict_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Name'</span><span class="p">:</span> <span class="s">'Zara'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="s">'Class'</span><span class="p">:</span> <span class="s">'First'</span><span class="p">}</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"data.json"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">dict_data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="피어세션-정리">피어세션 정리</h1>

<p>드디어 부스트 캠프 1주차가 마무리 되었습니다.</p>

<p>오늘도 각자 조원이 돌아가며 어제 자신이 했던 공부와 오늘 할 공부 계획을 발표하고, 서로 좋았던 내용이나 참고할 만한 내용이 있다면 그것을 공유하는 시간을 가질 수 있었습니다.</p>

<p>어떤분은 자신이 정리한 노트를 사용해 발표를 하셧고, 어떤분은 공부에 도움이 될만한 좋은 리소스 자료를 공유해 주셧습니다.</p>

<p>저는 일주일 동안 배운 내용 중 약간 애매하거나 혼동이 오는 개념들을 다시 한번 쭉 보면서 이것을 모아 그림판에 스크린샷으로 정리해서 조원들에게 설명을 하는 시간을 가졌었습니다.</p>

<p>확실히, 전날 보다 조금 더 친해진 모습으로 다같이 협동하여 세션을 진행할 수 있음에 기분이 좋았습니다.</p>

<p>그리고 저희 조는 1주일 간격으로 모더레이터를 맡게 되는데, 그래서 다음주를 담당할 모더레이터를 정하는 시간을 가졌었습니다.</p>

<h2 id="references">References</h2>

<ul>
  <li>파이선 - 최성철 교수님</li>
  <li><a href="https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%EC%8D%AC">Python - wikipedia</a></li>
</ul>
:ET